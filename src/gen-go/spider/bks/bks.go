// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bks

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Bks interface {
  // Parameters:
  //  - Xn
  //  - Xq
  //  - Stuid
  //  - Password
  GetClassTable(ctx context.Context, xn string, xq string, stuid string, password string) (r string, err error)
  // Parameters:
  //  - Xn
  //  - Xq
  //  - Stuid
  //  - Password
  GetGrade(ctx context.Context, xn string, xq string, stuid string, password string) (r string, err error)
}

type BksClient struct {
  c thrift.TClient
}

func NewBksClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BksClient {
  return &BksClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBksClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BksClient {
  return &BksClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBksClient(c thrift.TClient) *BksClient {
  return &BksClient{
    c: c,
  }
}

func (p *BksClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Xn
//  - Xq
//  - Stuid
//  - Password
func (p *BksClient) GetClassTable(ctx context.Context, xn string, xq string, stuid string, password string) (r string, err error) {
  var _args0 BksGetClassTableArgs
  _args0.Xn = xn
  _args0.Xq = xq
  _args0.Stuid = stuid
  _args0.Password = password
  var _result1 BksGetClassTableResult
  if err = p.Client_().Call(ctx, "getClassTable", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Xn
//  - Xq
//  - Stuid
//  - Password
func (p *BksClient) GetGrade(ctx context.Context, xn string, xq string, stuid string, password string) (r string, err error) {
  var _args2 BksGetGradeArgs
  _args2.Xn = xn
  _args2.Xq = xq
  _args2.Stuid = stuid
  _args2.Password = password
  var _result3 BksGetGradeResult
  if err = p.Client_().Call(ctx, "getGrade", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type BksProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Bks
}

func (p *BksProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BksProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BksProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBksProcessor(handler Bks) *BksProcessor {

  self4 := &BksProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["getClassTable"] = &bksProcessorGetClassTable{handler:handler}
  self4.processorMap["getGrade"] = &bksProcessorGetGrade{handler:handler}
return self4
}

func (p *BksProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type bksProcessorGetClassTable struct {
  handler Bks
}

func (p *bksProcessorGetClassTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BksGetClassTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClassTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BksGetClassTableResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetClassTable(ctx, args.Xn, args.Xq, args.Stuid, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClassTable: " + err2.Error())
    oprot.WriteMessageBegin("getClassTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getClassTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bksProcessorGetGrade struct {
  handler Bks
}

func (p *bksProcessorGetGrade) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BksGetGradeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGrade", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BksGetGradeResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetGrade(ctx, args.Xn, args.Xq, args.Stuid, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGrade: " + err2.Error())
    oprot.WriteMessageBegin("getGrade", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getGrade", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Xn
//  - Xq
//  - Stuid
//  - Password
type BksGetClassTableArgs struct {
  Xn string `thrift:"xn,1" db:"xn" json:"xn"`
  Xq string `thrift:"xq,2" db:"xq" json:"xq"`
  Stuid string `thrift:"stuid,3" db:"stuid" json:"stuid"`
  Password string `thrift:"password,4" db:"password" json:"password"`
}

func NewBksGetClassTableArgs() *BksGetClassTableArgs {
  return &BksGetClassTableArgs{}
}


func (p *BksGetClassTableArgs) GetXn() string {
  return p.Xn
}

func (p *BksGetClassTableArgs) GetXq() string {
  return p.Xq
}

func (p *BksGetClassTableArgs) GetStuid() string {
  return p.Stuid
}

func (p *BksGetClassTableArgs) GetPassword() string {
  return p.Password
}
func (p *BksGetClassTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BksGetClassTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Xn = v
}
  return nil
}

func (p *BksGetClassTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Xq = v
}
  return nil
}

func (p *BksGetClassTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Stuid = v
}
  return nil
}

func (p *BksGetClassTableArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *BksGetClassTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClassTable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BksGetClassTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xn", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:xn: ", p), err) }
  if err := oprot.WriteString(string(p.Xn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:xn: ", p), err) }
  return err
}

func (p *BksGetClassTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xq", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xq: ", p), err) }
  if err := oprot.WriteString(string(p.Xq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xq (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xq: ", p), err) }
  return err
}

func (p *BksGetClassTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stuid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stuid: ", p), err) }
  if err := oprot.WriteString(string(p.Stuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stuid: ", p), err) }
  return err
}

func (p *BksGetClassTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *BksGetClassTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BksGetClassTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BksGetClassTableResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBksGetClassTableResult() *BksGetClassTableResult {
  return &BksGetClassTableResult{}
}

var BksGetClassTableResult_Success_DEFAULT string
func (p *BksGetClassTableResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BksGetClassTableResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BksGetClassTableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BksGetClassTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BksGetClassTableResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BksGetClassTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClassTable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BksGetClassTableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BksGetClassTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BksGetClassTableResult(%+v)", *p)
}

// Attributes:
//  - Xn
//  - Xq
//  - Stuid
//  - Password
type BksGetGradeArgs struct {
  Xn string `thrift:"xn,1" db:"xn" json:"xn"`
  Xq string `thrift:"xq,2" db:"xq" json:"xq"`
  Stuid string `thrift:"stuid,3" db:"stuid" json:"stuid"`
  Password string `thrift:"password,4" db:"password" json:"password"`
}

func NewBksGetGradeArgs() *BksGetGradeArgs {
  return &BksGetGradeArgs{}
}


func (p *BksGetGradeArgs) GetXn() string {
  return p.Xn
}

func (p *BksGetGradeArgs) GetXq() string {
  return p.Xq
}

func (p *BksGetGradeArgs) GetStuid() string {
  return p.Stuid
}

func (p *BksGetGradeArgs) GetPassword() string {
  return p.Password
}
func (p *BksGetGradeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BksGetGradeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Xn = v
}
  return nil
}

func (p *BksGetGradeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Xq = v
}
  return nil
}

func (p *BksGetGradeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Stuid = v
}
  return nil
}

func (p *BksGetGradeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *BksGetGradeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGrade_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BksGetGradeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xn", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:xn: ", p), err) }
  if err := oprot.WriteString(string(p.Xn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:xn: ", p), err) }
  return err
}

func (p *BksGetGradeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("xq", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xq: ", p), err) }
  if err := oprot.WriteString(string(p.Xq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.xq (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xq: ", p), err) }
  return err
}

func (p *BksGetGradeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stuid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stuid: ", p), err) }
  if err := oprot.WriteString(string(p.Stuid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stuid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stuid: ", p), err) }
  return err
}

func (p *BksGetGradeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *BksGetGradeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BksGetGradeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BksGetGradeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBksGetGradeResult() *BksGetGradeResult {
  return &BksGetGradeResult{}
}

var BksGetGradeResult_Success_DEFAULT string
func (p *BksGetGradeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BksGetGradeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BksGetGradeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BksGetGradeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BksGetGradeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BksGetGradeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGrade_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BksGetGradeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BksGetGradeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BksGetGradeResult(%+v)", *p)
}


